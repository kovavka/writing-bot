import { PeroQueryActionType } from '../types'
import { InlineKeyboardButton } from '../../shared/copy/types'

type ButtonType = InlineKeyboardButton<PeroQueryActionType>

export const buttons = {
  newProject: <ButtonType>{
    text: '–ù–æ–≤—ã–π –≥—Ä–∏–º—É–∞—Ä üìú',
    callback_data: PeroQueryActionType.NewProject,
  },
  allProjects: <ButtonType>{
    text: '–ì—Ä–∏–º—É–∞—Ä—ã üìö',
    callback_data: PeroQueryActionType.AllProjects,
  },
  changeName: <ButtonType>{
    text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ü¶Ñ',
    callback_data: PeroQueryActionType.ChangeName,
  },
  editProject: (projectId: number): ButtonType => ({
    text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è',
    callback_data: `${PeroQueryActionType.EditProject}_${projectId}`,
  }),
  editGoal: (projectId: number): ButtonType => ({
    text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å üìà',
    callback_data: `${PeroQueryActionType.EditGoal}_${projectId}`,
  }),
  renameProject: (projectId: number): ButtonType => ({
    text: '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å üìù',
    callback_data: `${PeroQueryActionType.RenameProject}_${projectId}`,
  }),
  removeProject: (projectId: number): ButtonType => ({
    text: '–£–¥–∞–ª–∏—Ç—å ‚ùå',
    callback_data: `${PeroQueryActionType.RemoveProject}_${projectId}`,
  }),
  setToday: (projectId: number): ButtonType => ({
    text: '–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ üñãÔ∏è',
    callback_data: `${PeroQueryActionType.UpdateProject}_${projectId}`,
  }),
  statistics: (projectId: number): ButtonType => ({
    text: '–£–∑–Ω–∞—Ç—å –±—É–¥—É—à–µ–µ üîÆ',
    callback_data: `${PeroQueryActionType.StatProject}_${projectId}`,
  }),
}
