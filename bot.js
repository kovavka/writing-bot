// const TelegramBot = require('node-telegram-bot-api');
const { Telegraf, session } = require('telegraf');
require('dotenv').config();

const {getChart} = require('./chart')
const commands = require('./commands')

const {
    addUser,
    createProject,
    getDayResults,
    getProjects,
    getProject,
    setResult,
    close
} = require('./data-base')

const { TELEGRAM_BOT_TOKEN_PERO, ADMIN_ID } = process.env

// Create a bot instance
// const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
const bot = new Telegraf(TELEGRAM_BOT_TOKEN_PERO);
bot.use(session());

// todo add try catch everywhere

const errors = {
    unknown: `–ü–µ—Ä–æ –∑–Ω–∞–µ—Ç –º–Ω–æ–≥–æ, –Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –≤–µ–¥—å–º–æ—á–∫–∞ –æ—Ç –Ω–µ–≥–æ —Ö–æ—á–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ /help`,
    nameInvalid: `–£—Ö—Ö! –≠—Ç–æ –æ—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ. –õ—É—á—à–µ –Ω–∞–∑–≤–∞—Ç—å –≥—Ä–∏–º—É–∞—Ä –∏–Ω–∞—á–µ`,
    numberInvalid: `–û–π, –º–Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ —á–∏—Å–ª–æ, –∞ –Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`,
    generic: `–û–π, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ –Ω–µ –æ—á–µ–Ω—å —É–¥–∞—á–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–∞–≥–∏—Å—Ç—Ä—É`,
}

const wordForms = {
    words: ['—Å–ª–æ–≤–æ', '—Å–ª–æ–≤–∞', '—Å–ª–æ–≤'],
    days: ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'],
}

function getWordForm(number, forms) {
   if (number % 10 === 1 && number % 100 !== 11) {
       return forms[0]
   }
   if (number % 10 > 1 && number % 10 < 5 && (number % 100 < 10 || number % 100 > 20)) {
        return forms[1]
   }

   return forms[2]
}

const texts = {
    welcome: `–£—É—Ö—É —è - –ü–µ—Ä–æ, —Å–∞–º—ã–π —É–º–Ω—ã–π —Ñ–∞–º–∏–ª—å—è—Ä. –ë—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–µ —É–ø—É—â—É, —Ç–∞–∫ –∏ –∑–Ω–∞–π! –£—Ö—É—É!`,
    setName: `–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–≤–æ—è –≤–æ–ª—à–µ–±–Ω–∞—è –∫–Ω–∏–≥–∞?`,
    setStart: `–£–≥—É... –•–æ—Ä–æ—à–µ–µ –∏–º—è, –≤–µ–¥—å–º–æ—á–∫–∞! –¢–µ–ø–µ—Ä—å, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å?\n–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤–µ–¥—å–º–∞, –°–õ–û–í, –∞ –Ω–µ –∑–Ω–∞–∫–æ–≤. –ï—Å–ª–∏ –µ—â—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ—ë –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –ø–∏—à–∏ 0`,
    setGoal: `–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞ —è–Ω–≤–∞—Ä—å?`,
    projectCreated: (days, words)=> `WriteUp! –í—Ä–µ–º—è –ø–∏—Å–∞—Ç—å! –î–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${days} ${getWordForm(days, wordForms.days)}. –¢–≤–æ—è —Ü–µ–ª—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å: ${words} ${getWordForm(words, wordForms.words)}`,
    allProjects: `–£—É—Ö—É, –≤–æ—Ç –≤—Å–µ –≤–∞—à–∏ –≥—Ä–∏–º—É–∞—Ä—ã`,
    zeroProjects: `–ö–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –≥—Ä–∏–º—É–∞—Ä–æ–≤, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π`,
    selectProject: `–£—É—Ö—É, –æ—Ç–∫—Ä—ã–≤–∞—é –≥—Ä–∏–º—É–∞—Ä`,
    setToday: `–ù–∞–¥–µ—é—Å—å, —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª —Ö–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –ü–µ—Ä–æ, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`,
    todaySaved: (words) => `–í–æ—Ç —ç—Ç–æ –¥–∞, –∫–∞–∫–∞—è —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞—è –≤–µ–¥—å–º–æ—á–∫–∞ –º–Ω–µ –ø–æ–ø–∞–ª–∞—Å—å! –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–æ–∑–¥–∞–ª–∞ ${words} ${getWordForm(words, wordForms.words)}. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤—Å–µ –∫—Ä–µ–ø—á–µ, —É –Ω–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!`,
    statistics: (days, words) => `–í–ø–µ—Ä–µ–¥–∏ –µ—â–µ ${days} ${getWordForm(days, wordForms.days)} –∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${words} ${getWordForm(words, wordForms.words)}. –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è, –º–æ—è –≤–µ–¥—å–º–æ—á–∫–∞!`,
}

const buttons = {
    newProject: { text: '–ù–æ–≤—ã–π –≥—Ä–∏–º—É–∞—Ä üìú', callback_data: `new_project` },
    allProjects: { text: '–ì—Ä–∏–º—É–∞—Ä—ã üìö', callback_data: `all_projects` },
    setToday: (projectId) => ({ text: '–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ üñãÔ∏è', callback_data: `update_project_${projectId}` }),
    statistics: (projectId) => ({ text: '–£–∑–Ω–∞—Ç—å –±—É–¥—É—à–µ–µ üîÆ', callback_data: `stat_project_${projectId}` }),
}

function isAdmin(ctx) {
    const {id: userId} = ctx.from
    const ifAdmin = userId.toString() === ADMIN_ID

    if (!ifAdmin) {
        ctx.reply(errors.unknown);
    }

    return ifAdmin
}

function sendErrorToAdmin(err) {
    bot.telegram.sendMessage(ADMIN_ID, `Something went wrong. ${err}`)
        .catch(() => {});
}

function initSession(ctx) {
    if (ctx.session == null) {
        ctx.session = {};
    }
}

function getRemainingDaysInMonth() {
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth(); // Month is 0-indexed (0 = January, 11 = December)

    // Get the last day of the current month
    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0); // Day 0 gives the last day of the previous month

    // Calculate the difference in days
    return Math.ceil((lastDayOfMonth - today) / (1000 * 60 * 60 * 24)) + 1;
}


bot.start((ctx) => {
    const {id: userId, first_name, last_name} = ctx.from

    addUser(userId, `${first_name} ${last_name}`)
    ctx.reply(texts.welcome, {
        reply_markup: {
            inline_keyboard: [
                [
                    buttons.newProject
                ],
            ],
        },
    });
});

function sendStatistics(ctx, projectId) {


    Promise.all([getDayResults(projectId), getProject(projectId)]).then(([rows, project]) => {
        const data = []
        const {start, goal} = project

        const days = 31

        rows.forEach(({day, result}) => {
            data[day - 1] = result
        })

        // –º–æ–∂–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è

        const today = new Date().getDate()

        // todo start with actual words start
        let prevRes = 0
        for(let i = 0; i < today; i++) {
            if (data[i] !== undefined) {
                prevRes = data[i]
            } else {
                data[i] = prevRes
            }
        }

        // todo check if goal is achieved
        const daysLeft = days - today + 1
        const wordsLeft = goal + start - prevRes
        console.log(goal, prevRes)
        // todo fix goal
        getChart(days, data, start, goal + start).then((value) => {
            ctx.replyWithPhoto({ source: value }, { caption: texts.statistics(daysLeft, wordsLeft),
                reply_markup: {
                    inline_keyboard: [
                        [
                            buttons.setToday(projectId),
                        ],
                    ],
                }, });

            ctx.answerCbQuery();
        }).catch((err) => {
            ctx.reply(errors.generic);
            sendErrorToAdmin(err)

            ctx.answerCbQuery();
        })
    }).catch((err) => {
        ctx.reply(errors.generic);
        sendErrorToAdmin(err)
    })
}

bot.command('all', (ctx) => {
    const {id: userId} = ctx.from

    getProjects(userId).then((rows) => {
        if (rows.length === 0)  {
            ctx.reply(texts.zeroProjects, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            buttons.newProject
                        ]
                    ]
                },
            });
        } else {
            ctx.reply(texts.allProjects, {
                reply_markup: {
                    inline_keyboard:
                        rows.map(row => ([{ text: row.name, callback_data: `project_${row.id}` }]))

                },
            });
        }
    }).catch((err) => {
        sendErrorToAdmin(err)
        ctx.reply(errors.generic);
    })
})

bot.command('help', (ctx) => {
    ctx.reply(texts.welcome, {
        reply_markup: {
            inline_keyboard: [
                [
                    buttons.newProject,
                    buttons.allProjects,
                ],
            ],
        },
    });

})

bot.on('callback_query', (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    const {id: userId} = ctx.from

    initSession(ctx)
    if (callbackData === 'new_project') {
        ctx.session[userId] = { waitingForProjectName: true };

        ctx.reply(texts.setName);
        ctx.answerCbQuery();
    } else if (callbackData.startsWith('update_project_')) {
        const [,,projectId] = callbackData.split('_');

        ctx.session[userId] = {
            waitingForCurrentWords: true,
            projectId,
        };

        ctx.reply(texts.setToday);
        ctx.answerCbQuery();
    } else if (callbackData.startsWith('stat_project_')) {
        const [,,projectId] = callbackData.split('_');

        sendStatistics(ctx, projectId)

        ctx.answerCbQuery();
    } else if (callbackData.startsWith('project_')) {
        const [,projectId] = callbackData.split('_');

        ctx.reply(texts.selectProject,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            buttons.setToday(projectId),
                            buttons.statistics(projectId),
                        ],
                    ],
                },
            });

        ctx.answerCbQuery();
    } else {
        ctx.reply(errors.unknown);
        ctx.answerCbQuery();
    }
});

bot.on('text', (ctx) => {
    const {id: userId} = ctx.from
    const userInput = ctx.message.text;

    initSession(ctx)

    const sessionData = ctx.session[userId]

    if (sessionData == null) {
        ctx.reply(errors.unknown);
        return
    }

    if (sessionData.waitingForProjectName) {
        // check for invalid inputs and sql injections
        if (userInput != null) {
            ctx.reply(texts.setStart);

            sessionData.waitingForProjectName = false;
            sessionData.projectName = userInput
            sessionData.waitingForWordsStart = true;
        } else {
            ctx.reply(errors.nameInvalid);
        }
    } else if (sessionData.waitingForWordsStart) {
        const start = parseInt(userInput);
        if (!isNaN(start)) {
            ctx.reply(texts.setGoal);

            sessionData.waitingForWordsStart = false;
            sessionData.wordsStart = start
            sessionData.waitingForWordsGoal = true;
        } else {
            ctx.reply(errors.numberInvalid);
        }
    } else if (sessionData.waitingForWordsGoal) {
        // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ü–µ–ª—å –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª–∞
        const goal = parseInt(userInput);
        if (!isNaN(goal)) {
            const remainingDays = getRemainingDaysInMonth()

            const {projectName, wordsStart} = sessionData
            createProject(userId, projectName, wordsStart, goal).then(id => {
                const dailyGoal = Math.ceil((goal - wordsStart) / remainingDays)
                ctx.reply(texts.projectCreated(remainingDays, dailyGoal),
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    buttons.setToday(id),
                                    buttons.statistics(id),
                                ],
                            ],
                        },
                    });
            }).catch(err => {
                sendErrorToAdmin(err)
                ctx.reply(errors.generic);
            })

            sessionData.waitingForWordsGoal = false;
        } else {
            ctx.reply(errors.numberInvalid);
        }
    } else if (sessionData.waitingForCurrentWords && sessionData.projectId != null) {
        const {projectId} = sessionData
        const currentWords = parseInt(userInput);
        if (!isNaN(currentWords)) {
            setResult(projectId, currentWords)

            // todo
            const wordsLeft = 50000 - currentWords

            ctx.reply(texts.todaySaved(wordsLeft), {
                reply_markup: {
                    inline_keyboard: [
                        [
                            buttons.setToday(projectId),
                            buttons.statistics(projectId),
                        ],
                    ],
                },
            });

            sessionData.waitingForCurrentWords = false;
        } else {
            ctx.reply(errors.numberInvalid);
        }
    } else {
        ctx.reply(errors.unknown);

    }

});


bot.launch();

console.log('Bot is running...');

process.on('SIGINT', () => {
    close()
    process.exit(); // Ensure the process exits
});
